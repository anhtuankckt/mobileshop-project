const userModel = require('../models/userModel')
const transporter = require('../../common/transporter')
const bcryptjs = require('bcryptjs')
const jwt = require('jsonwebtoken')
const config = require('config')

const signup = async (req, res) => {
  res.render('admin/signup', { data: {} })
}

const postSignup = async (req, res) => {
  const { full_name, email, password, confirmPassword } = req.body

  if (!email.trim() || !password.trim() || !password.trim() || !confirmPassword.trim()) {
    const error = 'C√°c tr∆∞·ªùng nh·∫≠p v√†o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!'
    return res.render('admin/signup', {
      data: { error }
    })
  }

  if (password !== confirmPassword) {
    const error = 'M·∫≠t kh·∫©u nh·∫≠p v√†o kh√¥ng kh·ªõp!'
    return res.render('admin/signup', { data: { error } })
  }

  if (/\s/.test(email) || /\s/.test(password) || /\s/.test(confirmPassword)) {
    const error = 'Email, password kh√¥ng ch·ª©a kho·∫£ng tr·∫Øng!'
    return res.render('admin/signup', { data: { error } })
  }

  if (password.length < 6 || full_name.length < 6 || email.length < 6) {
    const error = 'C√°c tr∆∞·ªùng nh·∫≠p ph·∫£i √≠t nh·∫•t 5 k√≠ t·ª±!'
    return res.render('admin/signup', { data: { error } })
  }

  const existsEmail = await userModel.findOne({ email: { $regex: new RegExp(email, 'i') } })

  if (existsEmail) {
    const error = 'Email ƒëƒÉng k√≠ ƒë√£ t·ªìn t·∫°i!'
    return res.render('admin/signup', { data: { error } })
  }

  const hashedPassword = await bcryptjs.hash(password, 10)

  const newUser = new userModel({
    full_name,
    email,
    password: hashedPassword
  })

  await newUser.save()

  const token = jwt.sign({ id: newUser._id }, config.get('app.tokenSecretSignup'), { expiresIn: '365d' })
  const url = `http://localhost:3000/admin/signup/verification/${newUser._id}/${token}`

  // send mail with defined transport object
  await transporter.sendMail({
    from: '"MobileShop üëª" mobileshop@gmail.com', // sender address
    to: email, // list of receivers
    subject: "MobileShop - Verification account ‚úî", // Subject line
    text: `H√£y click v√†o link ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n: ${url}`
  });

  res.redirect('/admin/signup/success')
}

const getSignupSuccess = async (req, res) => {
  res.render('admin/signup_success')
}

const verificationForSingup = async (req, res) => {
  const { id, token } = req.params

  jwt.verify(token, config.get('app.tokenSecretSignup'), async (error, decoded) => {
    if (error) {
      // X·ª≠ l√Ω l·ªói khi verify JWT
      if (error instanceof jwt.TokenExpiredError) {
        const expiredError = 'Token ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª≠ l·∫°i!';
        return res.render('admin/signup', { data: { error: expiredError } });
      } else {
        const otherError = 'L·ªói token!';
        return res.render('admin/signup', { data: { error: otherError } });
      }
    } else {
      // Kh√¥ng c√≥ l·ªói, ti·∫øp t·ª•c v·ªõi vi·ªác c·∫≠p nh·∫≠t v√† chuy·ªÉn h∆∞·ªõng
      await userModel.updateOne({ _id: id }, { $set: { confirmed: true } });
      return res.render('admin/signup_verification_success')
    }
  })
}

const getLogin = async (req, res) => {
  res.render("admin/login", { data: {} })
}

const postLogin = async (req, res) => {
  const { email, password, remember } = req.body

  if (!email.trim() || !password.trim()) {
    const error = 'Kh√¥ng ƒë·ªÉ tr·ªëng email, password!'
    return res.render('admin/login', {
      data: { error }
    })
  }

  const emailExists = await userModel.findOne({ email: { $regex: new RegExp(email, 'i') } })

  if (!emailExists) {
    const error = 'Email kh√¥ng t·ªìn t·∫°i!'
    return res.render('admin/login', {
      data: { error }
    })
  }

  if (emailExists.is_delete) {
    const error = 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã x√≥a!'
    return res.render('admin/login', {
      data: { error }
    })
  }

  const isMatch = await bcryptjs.compare(password, emailExists.password)

  if (!isMatch) {
    const error = 'Password kh√¥ng ch√≠nh x√°c!'
    return res.render('admin/login', {
      data: { error }
    })
  }

  // Ki·ªÉm tra x√°c th·ª±c email
  if (!emailExists.confirmed) {
    const error = 'Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c m·∫≠t kh·∫©u! H√£y x√°c th·ª±c ho·∫∑c ƒëƒÉng nh·∫≠p b·∫±ng Google, Facebook!'
    return res.render('admin/login', {
      data: { error }
    })
  }
  // Ghi nh·ªõ t√†i kho·∫£n, m·∫≠t kh·∫©u
  if (remember) {
    res.cookie('savedEmail', email, { maxAge: 3600000 })
  } else {
    res.clearCookie('savedEmail')
  }

  req.session.email = emailExists.email
  req.session.password = emailExists.password

  res.redirect('/admin/login/success')
}

const logout = (req, res) => {
  req.session.destroy()
  res.clearCookie('savedEmail')
  res.redirect("/admin/login")
}

const loginSuccess = async (req, res) => {
  res.render('admin/login_success')
}

const getForgotPassword = async (req, res) => {
  res.render('admin/auth/forgot_password', { data: {} })
}

const postForgotPassword = async (req, res) => {
  const { email } = req.body
  const user = await userModel.findOne({ email: email })
  if (!user) {
    const error = 'Email kh√¥ng ch√≠nh x√°c!'
    return res.render('admin/auth/forgot_password', { data: { error } })
  }

  const token = jwt.sign({ id: user?.id }, config.get('app.tokenSecretForgotPassword'), { expiresIn: '1m' })

  // send mail with defined transport object
  await transporter.sendMail({
    from: '"MobileShop üëª" mobileshop@gmail.com', // sender address
    to: email, // list of receivers
    subject: "MobileShop - Forgot Password ‚úî", // Subject line
    text: `http://localhost:3000/admin/reset-password/${user._id}/${token}`
  });

  res.redirect('/admin/login')
}

const getForgotPasswordSuccess = async (req, res) => {
  res.render('admin/auth/forgot_password_success', { data: {} })
}

const getResetPassword = async (req, res) => {
  const { id } = req.params
  const user = await userModel.findById(id)

  res.render('admin/auth/reset_password', { data: {}, user })
}

const postResetPassword = async (req, res) => {
  const { id, token } = req.params
  const { password, confirmPassword } = req.body
  const user = await userModel.findById(id)

  if (!password.trim() || !confirmPassword.trim()) {
    const error = 'Kh√¥ng ƒë·ªÉ tr·ªëng password!'
    return res.render('admin/auth/reset_password', { data: { error }, user })
  }

  if (password !== confirmPassword) {
    const error = 'Password kh√¥ng kh·ªõp!'
    return res.render('admin/auth/reset_password', { data: { error }, user })
  }

  if (/\s/.test(password) || /\s/.test(confirmPassword)) {
    const error = 'Password kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng'
    return res.render('admin/auth/reset_password', { data: { error }, user })
  }

  if (password.length < 6 || confirmPassword.length < 6) {
    const error = 'Password t·ª´ 6 k√≠ t·ª± tr·ªü l√™n!'
    return res.render('admin/auth/reset_password', { data: { error }, user })
  }

  const hashedPassword = await bcryptjs.hash(password, 10)

  const resetPassword = {
    password: hashedPassword
  }

  jwt.verify(token, config.get('app.tokenSecretForgotPassword'), async (error, decoded) => {
    if (error) {
      // X·ª≠ l√Ω l·ªói khi verify JWT
      if (error instanceof jwt.TokenExpiredError) {
        const expiredError = 'Token ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª≠ l·∫°i!';
        return res.render('admin/auth/reset_password', { data: { error: expiredError }, user });
      } else {
        const otherError = 'Qu√™n m·∫≠t kh·∫©u v√† nh·∫≠p l·∫°i!';
        return res.render('admin/auth/reset_password', { data: { error: otherError }, user });
      }
    } else {
      // Kh√¥ng c√≥ l·ªói, ti·∫øp t·ª•c v·ªõi vi·ªác c·∫≠p nh·∫≠t m·∫≠t kh·∫©u v√† chuy·ªÉn h∆∞·ªõng
      await userModel.updateOne({ _id: id }, { $set: resetPassword });
      res.redirect('/admin/login');
    }
  })
}

/** GOOOGLE - FACEBOOK */
const loginGoogle = async (req, res) => {
  const { google_id, tokenLogin } = req?.params
  const user = await userModel.findOne({ google_id, tokenLogin })
  if (!user) {
    const error = "T√†i kho·∫£n kh√¥ng ch√≠nh x√°c!"
    res.render("admin/login", { data: { error } })
  }
  req.session.email = user.email
  req.session.password = user.password
  return res.redirect('/admin/login/success')
}

const loginFacebook = async (req, res) => {
  const { facebook_id, tokenLogin } = req?.params
  const user = await userModel.findOne({ facebook_id, tokenLogin })
  if (!user) {
    const error = "T√†i kho·∫£n kh√¥ng ch√≠nh x√°c!"
    res.render("admin/login", { data: { error } })
  }
  req.session.email = user.email
  req.session.password = user.password
  return res.redirect('/admin/login/success')
}

module.exports = {
  getLogin,
  postLogin,
  signup,
  postSignup,
  logout,
  getForgotPassword,
  postForgotPassword,
  getForgotPasswordSuccess,
  getResetPassword,
  postResetPassword,
  logout,
  loginGoogle,
  getSignupSuccess,
  verificationForSingup,
  loginFacebook,
  loginSuccess
}
